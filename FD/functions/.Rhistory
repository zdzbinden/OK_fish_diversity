source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
occ_fruits_baskets<-weight_fruits_baskets
occ_fruits_baskets[which(occ_fruits_baskets>0)]<-1
# indices computation for only a subset of 5 assemblages (to save time for this example)
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets[1:5,],  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[3:5] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
# look to the folder "../plot_FbetaD"
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
# occurences from species weights
occ_fruits_baskets<-weight_fruits_baskets
occ_fruits_baskets[which(occ_fruits_baskets>0)]<-1
# indices computation for only a subset of 5 assemblages (to save time for this example)
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets[1:5,],  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[3:5] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
# look to the folder "../plot_FbetaD"
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
# indices computation for only a subset of 5 assemblages (to save time for this example)
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets[1:5,],  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[3:5] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
# look to the folder "../plot_FbetaD"
rm(list=ls()) # cleaning memory
##############################################################################################
# sourcing the 3 "homemade" functions
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
##############################################################################################
# IMPORTING DATASETS
setwd("/Volumes/Data/tutorial_FD/data") # folder where data have been saved
# importing biomass of species in assemblages from a txt file: species names are in the first column and will be used as row names
weight_fruits_baskets<-read.table("weight_fruits_baskets.txt", header=T, row.names =1)
weight_fruits_baskets<-as.matrix(weight_fruits_baskets)
weight_fruits_baskets
############################################
# importing species raw traits values from a txt file: row names are in the column named 'Species'
traits_raw_fruits<-read.table("traits_raw_fruits.txt", header=T, row.names = "Species")
# checking that species names are the same in the two matrices
sum( row.names(traits_raw_fruits) %in% colnames(weight_fruits_baskets) ) == ncol(weight_fruits_baskets)
# looking at traits coding after importing data
traits_raw_fruits
summary(traits_raw_fruits) # all traits but 'Sugar_content' are considered as categorical while some should be coded as ordinal
# => need to set correct type of variables
# empty dataframe to store traits values
traits_fruits<-as.data.frame( matrix(NA, nrow(traits_raw_fruits), ncol(traits_raw_fruits),
dimnames=list( row.names(traits_raw_fruits), names(traits_raw_fruits) ) ) )
# ordinal traits converted to "ordered" mode
traits_fruits[,"Size"]<-factor(traits_raw_fruits[,"Size"], levels=c("0-1cm", "1-3cm", "3-5cm", "5-10cm", "10-20cm" ), labels = c("very_small", "small", "medium", "large", "very_large" ), ordered = TRUE )
traits_fruits[,"Plant"]<-traits_raw_fruits[,"Plant"]
traits_fruits[,"Origin"]<-factor(traits_raw_fruits[,"Origin"], levels=c("temperate", "subtropical", "tropical" ), ordered = TRUE )
traits_fruits[,"Seed"]<-factor(traits_raw_fruits[,"Seed"], levels=c("none", "pit", "pip" ), ordered = TRUE )
traits_fruits[,"Sugar_content"]<-as.numeric( traits_raw_fruits[,"Sugar_content"] )
# comparing before/after conversion
is.ordered(traits_raw_fruits[,"Size"])
is.ordered(traits_fruits[,"Size"])
# species names and codes (for graphics)
species_names<-row.names(traits_fruits)
species_codes<-substr(species_names,1,4) ; names(species_codes)<-species_names # codes = 4 first letters of species name
length(unique(species_codes))==length(species_names) # False
summary(as.factor(species_codes)) # grappefruit and grape has same code
species_codes["grapefruit"]<-"graf" # new code for grapefruit
length(unique(species_codes))==length(species_names) # OK
##############################################################################################
# saving R objects
setwd("/Volumes/Data/tutorial_FD/results") # setting working directory for results
save(traits_fruits, file="traits_fruits")
save(weight_fruits_baskets, file="weight_fruits_baskets")
save(species_codes, file="species_codes")
##############################################################################################
##############################################################################################
# FUNCTIONAL SPACE
# computing all functional spaces based on dendrogram or PCoA (up to 10 axes)
qual_funct_space<-quality_funct_space(traits_fruits, traits_weights=NULL, nbdim=10, metric="Gower", dendro=TRUE, plot="quality_funct_space_fruits")
qual_funct_space$meanSD # => best space has 4 dimensions + have a look to the "quality_funct_space_fruits.jpeg" file in the /results folder
# keeping species coordinates in the best space and saving this matrix
coord_fruits_4D<-qual_funct_space$details_funct_space$mat_coord[,1:4]
save(coord_fruits_4D, file="coord_fruits_4D")
#################################
# few examples of how exploring functional space
# plot of 4D functional space => look to the jpeg file in the /results folder
plot_funct_space( coord_fruits_4D,col_sp="blue", pch_sp=21, nm_jpeg="Fspace_fruits_4D.jpeg", cex_sp=1.6, close_jpeg=TRUE   )
# looking at position of all species in the 4D space
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.58,0.48), col_sp="blue", pch_sp=species_codes, nm_jpeg="Fspace_fruits_codes_12.jpeg", cex_sp=0.6, close_jpeg=TRUE   )
plot_funct_space( coord_fruits_4D, Faxes=c( "PC3","PC4"), Faxes_lim=c(-0.58,0.48), col_sp="blue", pch_sp=species_codes, nm_jpeg="Fspace_fruits_codes_34.jpeg", cex_sp=0.6, close_jpeg=TRUE   )
# looking at position of 3 particular species on the 2 first PC axes
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.55,0.45), col_sp="grey50", pch_sp="+", nm_jpeg="Fspace_fruits_12_3species.jpeg", cex_sp=0.6, close_jpeg=FALSE   ) # all species plotted with crosses, not closing the jpeg
text(coord_fruits_4D[c("cherry","lime","lemon"),1:2], c("cherry","lime","lemon"), cex=0.8, col="red3" ) # adding species codes for only 3 species
graphics.off() # closing the jpeg
# looking at distribution of values for one trait in the functional space
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.58,0.48), col_sp=as.factor(traits_fruits[,"Plant"]), pch_sp=21, nm_jpeg="Fspace_fruits_12_plant.jpeg", cex_sp=0.6, close_jpeg=FALSE   ) # points color defined according to values of this categorical trait, not closing the jpeg
plot(0:5,0:5,type="n", axes=F,xlab="", ylab="") # empty plot for legend on the right panel
points(rep(1.8,4), 1:4, pch=21, cex=2, bg=as.factor(levels(traits_fruits[,"Plant"])) )
text(rep(2,4), 1:4, levels(traits_fruits[,"Plant"]), cex=2, adj=0 )
graphics.off() # closing the jpeg
#################################
# illustration of bias induced by functional dendrogram or space of low dimensionality
# functional differences between lime and lemon and lime and cherry
# traits values
traits_fruits[c("cherry","lime","lemon"),]
# raw distance based on traits values => lime is >3 times closer to lemon than to cherry
round(as.matrix(qual_funct_space$details_funct_space$mat_dissim)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
##################################
# plot of best functional dendrogram
plot(qual_funct_space$details_funct_space$best_tree, sub="", main="UPGMA", xlab="")
# distance on best dendrogram
round(as.matrix(qual_funct_space$details_funct_space$dist_st$t_UPGMA)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime as close to lemon than to cherry
# look at position of lime on the tree
##################################
# distance in the 2D space
round(as.matrix(qual_funct_space$details_funct_space$dist_st$m_2D)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime closer to lemon than to cherry, but cherry is less than 1.5 further than lime from lemon
# look at position of these 3 species on PC1-PC2 on "Fspace_fruits_codes_12.jpeg", cherry is not that far from both Citrus
##################################
# distance in the 4D space
round(as.matrix(qual_funct_space$details_funct_space$dist_st$m_4D)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime 2.4 times closer to lemon than to cherry
# look at position of these 3 species on PC3-PC4 on "Fspace_fruits_4D.jpeg", cherry is far from both Citrus
##############################################################################################
# MULTIDIMENSIONAL FUNCTIONAL DIVERISTY INDICES
# computing Functional diversity indices with plots of FD indices put in a subfolder named plot_FD
FD_baskets<-multidimFD(coord_fruits_4D, weight_fruits_baskets, check_species_pool=TRUE, verb=TRUE,
nm_asb_plot=row.names(weight_fruits_baskets), folder_plot="/Volumes/Data/tutorial_FD/results/plot_FD/",
Faxes_plot=colnames(coord_fruits_4D)[1:4], Faxes_nm_plot=colnames(coord_fruits_4D)[1:4],
plot_pool=TRUE, col_bg="grey90", col_sp_pool="grey30",  pch_sp_pool="+", cex_sp_pool=1,
pch_sp=21, col_sp="#1E90FF", transp=50 )
# printing results = rounded FD indices values
round(FD_baskets,3)
# look to the folder "../plot_FD"
##############################################################################################
# MULTIDIMENSIONAL FUNCTIONAL BETA DIVERISTY INDICES
# occurences from species weights
occ_fruits_baskets<-weight_fruits_baskets
occ_fruits_baskets[which(occ_fruits_baskets>0)]<-1
# indices computation for all pairs of asssemblages but plot for only a subset
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[5:9] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
# look to the folder "../plot_FbetaD"
##############################################################################################
# NULL MODEL
# example of how running a null model : here we want to test H0: Basket_4 results from a random sorting of species in the regional species pool (i.e. all species) given its species richness. To keep the exampel simple, will focus only on FRic index so taking into account only species composition, not species weights
# picking many assemblages of S(basket_4) species at random among the 25 fruits
nbrep<-99 # number of replicates
S_basket_4<-FD_baskets["basket_4","Nb_sp"]
S_basket_4 # 8 species`
# empty matrix to store simulated species occurences
basket_4_H0<-matrix(0, nbrep, ncol(weight_fruits_baskets), dimnames=list(1:nbrep, colnames(weight_fruits_baskets) ) )
for (k in 1:nbrep)
{
basket_4_H0[k, sample(  colnames(weight_fruits_baskets), S_basket_4) ]<-1 # random sorting of species
}# end of k
# computing FD indices on these assemblages, ,  check_species_pool=FALSE since by chance some species could be never picked
FD_basket_4_H0<-multidimFD(coord_fruits_4D, basket_4_H0,  check_species_pool=FALSE )
# comparing observed and expected values under H0 using sES and p-value metrics
SES_FRic_basket_4<- (FD_baskets["basket_4","FRic"]-mean(FD_basket_4_H0[,"FRic"]) ) / sd(FD_basket_4_H0[,"FRic"])
SES_FRic_basket_4 # SES<(-1) means that observed Fric is lower than expected
pvalue_FRic_basket_4<- length(which(FD_baskets["basket_4","FRic"]<=FD_basket_4_H0[,"FRic"]))/ ( length(FD_basket_4_H0[,"FRic"]) +1 )
pvalue_FRic_basket_4 # p-value >0.975 => FRic is significantly lower than expected under H0
##############################################################################################
rm(list=ls()) # cleaning memory
##############################################################################################
# sourcing the 3 "homemade" functions
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
##############################################################################################
# IMPORTING DATASETS
setwd("/Volumes/Data/tutorial_FD/data") # folder where data have been saved
# importing biomass of species in assemblages from a txt file: species names are in the first column and will be used as row names
weight_fruits_baskets<-read.table("weight_fruits_baskets.txt", header=T, row.names =1)
weight_fruits_baskets<-as.matrix(weight_fruits_baskets)
weight_fruits_baskets
############################################
# importing species raw traits values from a txt file: row names are in the column named 'Species'
traits_raw_fruits<-read.table("traits_raw_fruits.txt", header=T, row.names = "Species")
# checking that species names are the same in the two matrices
sum( row.names(traits_raw_fruits) %in% colnames(weight_fruits_baskets) ) == ncol(weight_fruits_baskets)
# looking at traits coding after importing data
traits_raw_fruits
summary(traits_raw_fruits) # all traits but 'Sugar_content' are considered as categorical while some should be coded as ordinal
# => need to set correct type of variables
# empty dataframe to store traits values
traits_fruits<-as.data.frame( matrix(NA, nrow(traits_raw_fruits), ncol(traits_raw_fruits),
dimnames=list( row.names(traits_raw_fruits), names(traits_raw_fruits) ) ) )
# ordinal traits converted to "ordered" mode
traits_fruits[,"Size"]<-factor(traits_raw_fruits[,"Size"], levels=c("0-1cm", "1-3cm", "3-5cm", "5-10cm", "10-20cm" ), labels = c("very_small", "small", "medium", "large", "very_large" ), ordered = TRUE )
traits_fruits[,"Plant"]<-traits_raw_fruits[,"Plant"]
traits_fruits[,"Origin"]<-factor(traits_raw_fruits[,"Origin"], levels=c("temperate", "subtropical", "tropical" ), ordered = TRUE )
traits_fruits[,"Seed"]<-factor(traits_raw_fruits[,"Seed"], levels=c("none", "pit", "pip" ), ordered = TRUE )
traits_fruits[,"Sugar_content"]<-as.numeric( traits_raw_fruits[,"Sugar_content"] )
# comparing before/after conversion
is.ordered(traits_raw_fruits[,"Size"])
is.ordered(traits_fruits[,"Size"])
# species names and codes (for graphics)
species_names<-row.names(traits_fruits)
species_codes<-substr(species_names,1,4) ; names(species_codes)<-species_names # codes = 4 first letters of species name
length(unique(species_codes))==length(species_names) # False
summary(as.factor(species_codes)) # grappefruit and grape has same code
species_codes["grapefruit"]<-"graf" # new code for grapefruit
length(unique(species_codes))==length(species_names) # OK
##############################################################################################
# saving R objects
setwd("/Volumes/Data/tutorial_FD/results") # setting working directory for results
save(traits_fruits, file="traits_fruits")
save(weight_fruits_baskets, file="weight_fruits_baskets")
save(species_codes, file="species_codes")
##############################################################################################
##############################################################################################
# FUNCTIONAL SPACE
# computing all functional spaces based on dendrogram or PCoA (up to 10 axes)
qual_funct_space<-quality_funct_space(traits_fruits, traits_weights=NULL, nbdim=10, metric="Gower", dendro=TRUE, plot="quality_funct_space_fruits")
qual_funct_space$meanSD # => best space has 4 dimensions + have a look to the "quality_funct_space_fruits.jpeg" file in the /results folder
# keeping species coordinates in the best space and saving this matrix
coord_fruits_4D<-qual_funct_space$details_funct_space$mat_coord[,1:4]
save(coord_fruits_4D, file="coord_fruits_4D")
#################################
# few examples of how exploring functional space
# plot of 4D functional space => look to the jpeg file in the /results folder
plot_funct_space( coord_fruits_4D,col_sp="blue", pch_sp=21, nm_jpeg="Fspace_fruits_4D.jpeg", cex_sp=1.6, close_jpeg=TRUE   )
# looking at position of all species in the 4D space
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.58,0.48), col_sp="blue", pch_sp=species_codes, nm_jpeg="Fspace_fruits_codes_12.jpeg", cex_sp=0.6, close_jpeg=TRUE   )
plot_funct_space( coord_fruits_4D, Faxes=c( "PC3","PC4"), Faxes_lim=c(-0.58,0.48), col_sp="blue", pch_sp=species_codes, nm_jpeg="Fspace_fruits_codes_34.jpeg", cex_sp=0.6, close_jpeg=TRUE   )
# looking at position of 3 particular species on the 2 first PC axes
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.55,0.45), col_sp="grey50", pch_sp="+", nm_jpeg="Fspace_fruits_12_3species.jpeg", cex_sp=0.6, close_jpeg=FALSE   ) # all species plotted with crosses, not closing the jpeg
text(coord_fruits_4D[c("cherry","lime","lemon"),1:2], c("cherry","lime","lemon"), cex=0.8, col="red3" ) # adding species codes for only 3 species
graphics.off() # closing the jpeg
# looking at distribution of values for one trait in the functional space
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.58,0.48), col_sp=as.factor(traits_fruits[,"Plant"]), pch_sp=21, nm_jpeg="Fspace_fruits_12_plant.jpeg", cex_sp=0.6, close_jpeg=FALSE   ) # points color defined according to values of this categorical trait, not closing the jpeg
plot(0:5,0:5,type="n", axes=F,xlab="", ylab="") # empty plot for legend on the right panel
points(rep(1.8,4), 1:4, pch=21, cex=2, bg=as.factor(levels(traits_fruits[,"Plant"])) )
text(rep(2,4), 1:4, levels(traits_fruits[,"Plant"]), cex=2, adj=0 )
graphics.off() # closing the jpeg
#################################
# illustration of bias induced by functional dendrogram or space of low dimensionality
# functional differences between lime and lemon and lime and cherry
# traits values
traits_fruits[c("cherry","lime","lemon"),]
# raw distance based on traits values => lime is >3 times closer to lemon than to cherry
round(as.matrix(qual_funct_space$details_funct_space$mat_dissim)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
##################################
# plot of best functional dendrogram
plot(qual_funct_space$details_funct_space$best_tree, sub="", main="UPGMA", xlab="")
# distance on best dendrogram
round(as.matrix(qual_funct_space$details_funct_space$dist_st$t_UPGMA)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime as close to lemon than to cherry
# look at position of lime on the tree
##################################
# distance in the 2D space
round(as.matrix(qual_funct_space$details_funct_space$dist_st$m_2D)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime closer to lemon than to cherry, but cherry is less than 1.5 further than lime from lemon
# look at position of these 3 species on PC1-PC2 on "Fspace_fruits_codes_12.jpeg", cherry is not that far from both Citrus
##################################
# distance in the 4D space
round(as.matrix(qual_funct_space$details_funct_space$dist_st$m_4D)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime 2.4 times closer to lemon than to cherry
# look at position of these 3 species on PC3-PC4 on "Fspace_fruits_4D.jpeg", cherry is far from both Citrus
##############################################################################################
# MULTIDIMENSIONAL FUNCTIONAL DIVERISTY INDICES
# computing Functional diversity indices with plots of FD indices put in a subfolder named plot_FD
FD_baskets<-multidimFD(coord_fruits_4D, weight_fruits_baskets, check_species_pool=TRUE, verb=TRUE,
nm_asb_plot=row.names(weight_fruits_baskets), folder_plot="/Volumes/Data/tutorial_FD/results/plot_FD/",
Faxes_plot=colnames(coord_fruits_4D)[1:4], Faxes_nm_plot=colnames(coord_fruits_4D)[1:4],
plot_pool=TRUE, col_bg="grey90", col_sp_pool="grey30",  pch_sp_pool="+", cex_sp_pool=1,
pch_sp=21, col_sp="#1E90FF", transp=50 )
# printing results = rounded FD indices values
round(FD_baskets,3)
# look to the folder "../plot_FD"
##############################################################################################
# MULTIDIMENSIONAL FUNCTIONAL BETA DIVERISTY INDICES
# occurences from species weights
occ_fruits_baskets<-weight_fruits_baskets
occ_fruits_baskets[which(occ_fruits_baskets>0)]<-1
# indices computation for all pairs of asssemblages but plot for only a subset
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[5:9] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
# look to the folder "../plot_FbetaD"
##############################################################################################
# NULL MODEL
# example of how running a null model : here we want to test H0: Basket_4 results from a random sorting of species in the regional species pool (i.e. all species) given its species richness. To keep the exampel simple, will focus only on FRic index so taking into account only species composition, not species weights
# picking many assemblages of S(basket_4) species at random among the 25 fruits
nbrep<-99 # number of replicates
S_basket_4<-FD_baskets["basket_4","Nb_sp"]
S_basket_4 # 8 species`
# empty matrix to store simulated species occurences
basket_4_H0<-matrix(0, nbrep, ncol(weight_fruits_baskets), dimnames=list(1:nbrep, colnames(weight_fruits_baskets) ) )
for (k in 1:nbrep)
{
basket_4_H0[k, sample(  colnames(weight_fruits_baskets), S_basket_4) ]<-1 # random sorting of species
}# end of k
# computing FD indices on these assemblages, ,  check_species_pool=FALSE since by chance some species could be never picked
FD_basket_4_H0<-multidimFD(coord_fruits_4D, basket_4_H0,  check_species_pool=FALSE )
# comparing observed and expected values under H0 using sES and p-value metrics
SES_FRic_basket_4<- (FD_baskets["basket_4","FRic"]-mean(FD_basket_4_H0[,"FRic"]) ) / sd(FD_basket_4_H0[,"FRic"])
SES_FRic_basket_4 # SES<(-1) means that observed Fric is lower than expected
pvalue_FRic_basket_4<- length(which(FD_baskets["basket_4","FRic"]<=FD_basket_4_H0[,"FRic"]))/ ( length(FD_basket_4_H0[,"FRic"]) +1 )
pvalue_FRic_basket_4 # p-value >0.975 => FRic is significantly lower than expected under H0
##############################################################################################
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
# indices computation for all pairs of asssemblages but plot for only a subset
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[5:9] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
# indices computation for all pairs of asssemblages but plot for only a subset
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[5:9] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
# indices computation for all pairs of asssemblages but plot for only a subset
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[5:9] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
rm(list=ls()) # cleaning memory
##############################################################################################
# sourcing the 3 "homemade" functions
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
##############################################################################################
# IMPORTING DATASETS
setwd("/Volumes/Data/tutorial_FD/data") # folder where data have been saved
# importing biomass of species in assemblages from a txt file: species names are in the first column and will be used as row names
weight_fruits_baskets<-read.table("weight_fruits_baskets.txt", header=T, row.names =1)
weight_fruits_baskets<-as.matrix(weight_fruits_baskets)
weight_fruits_baskets
############################################
# importing species raw traits values from a txt file: row names are in the column named 'Species'
traits_raw_fruits<-read.table("traits_raw_fruits.txt", header=T, row.names = "Species")
# checking that species names are the same in the two matrices
sum( row.names(traits_raw_fruits) %in% colnames(weight_fruits_baskets) ) == ncol(weight_fruits_baskets)
# looking at traits coding after importing data
traits_raw_fruits
summary(traits_raw_fruits) # all traits but 'Sugar_content' are considered as categorical while some should be coded as ordinal
# => need to set correct type of variables
# empty dataframe to store traits values
traits_fruits<-as.data.frame( matrix(NA, nrow(traits_raw_fruits), ncol(traits_raw_fruits),
dimnames=list( row.names(traits_raw_fruits), names(traits_raw_fruits) ) ) )
# ordinal traits converted to "ordered" mode
traits_fruits[,"Size"]<-factor(traits_raw_fruits[,"Size"], levels=c("0-1cm", "1-3cm", "3-5cm", "5-10cm", "10-20cm" ), labels = c("very_small", "small", "medium", "large", "very_large" ), ordered = TRUE )
traits_fruits[,"Plant"]<-traits_raw_fruits[,"Plant"]
traits_fruits[,"Origin"]<-factor(traits_raw_fruits[,"Origin"], levels=c("temperate", "subtropical", "tropical" ), ordered = TRUE )
traits_fruits[,"Seed"]<-factor(traits_raw_fruits[,"Seed"], levels=c("none", "pit", "pip" ), ordered = TRUE )
traits_fruits[,"Sugar_content"]<-as.numeric( traits_raw_fruits[,"Sugar_content"] )
# comparing before/after conversion
is.ordered(traits_raw_fruits[,"Size"])
is.ordered(traits_fruits[,"Size"])
# species names and codes (for graphics)
species_names<-row.names(traits_fruits)
species_codes<-substr(species_names,1,4) ; names(species_codes)<-species_names # codes = 4 first letters of species name
length(unique(species_codes))==length(species_names) # False
summary(as.factor(species_codes)) # grappefruit and grape has same code
species_codes["grapefruit"]<-"graf" # new code for grapefruit
length(unique(species_codes))==length(species_names) # OK
##############################################################################################
# saving R objects
setwd("/Volumes/Data/tutorial_FD/results") # setting working directory for results
save(traits_fruits, file="traits_fruits")
save(weight_fruits_baskets, file="weight_fruits_baskets")
save(species_codes, file="species_codes")
##############################################################################################
##############################################################################################
# FUNCTIONAL SPACE
# computing all functional spaces based on dendrogram or PCoA (up to 10 axes)
qual_funct_space<-quality_funct_space(traits_fruits, traits_weights=NULL, nbdim=10, metric="Gower", dendro=TRUE, plot="quality_funct_space_fruits")
qual_funct_space$meanSD # => best space has 4 dimensions + have a look to the "quality_funct_space_fruits.jpeg" file in the /results folder
# keeping species coordinates in the best space and saving this matrix
coord_fruits_4D<-qual_funct_space$details_funct_space$mat_coord[,1:4]
save(coord_fruits_4D, file="coord_fruits_4D")
#################################
# few examples of how exploring functional space
# plot of 4D functional space => look to the jpeg file in the /results folder
plot_funct_space( coord_fruits_4D,col_sp="blue", pch_sp=21, nm_jpeg="Fspace_fruits_4D.jpeg", cex_sp=1.6, close_jpeg=TRUE   )
# looking at position of all species in the 4D space
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.58,0.48), col_sp="blue", pch_sp=species_codes, nm_jpeg="Fspace_fruits_codes_12.jpeg", cex_sp=0.6, close_jpeg=TRUE   )
plot_funct_space( coord_fruits_4D, Faxes=c( "PC3","PC4"), Faxes_lim=c(-0.58,0.48), col_sp="blue", pch_sp=species_codes, nm_jpeg="Fspace_fruits_codes_34.jpeg", cex_sp=0.6, close_jpeg=TRUE   )
# looking at position of 3 particular species on the 2 first PC axes
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.55,0.45), col_sp="grey50", pch_sp="+", nm_jpeg="Fspace_fruits_12_3species.jpeg", cex_sp=0.6, close_jpeg=FALSE   ) # all species plotted with crosses, not closing the jpeg
text(coord_fruits_4D[c("cherry","lime","lemon"),1:2], c("cherry","lime","lemon"), cex=0.8, col="red3" ) # adding species codes for only 3 species
graphics.off() # closing the jpeg
# looking at distribution of values for one trait in the functional space
plot_funct_space( coord_fruits_4D, Faxes=c( "PC1","PC2"), Faxes_lim=c(-0.58,0.48), col_sp=as.factor(traits_fruits[,"Plant"]), pch_sp=21, nm_jpeg="Fspace_fruits_12_plant.jpeg", cex_sp=0.6, close_jpeg=FALSE   ) # points color defined according to values of this categorical trait, not closing the jpeg
plot(0:5,0:5,type="n", axes=F,xlab="", ylab="") # empty plot for legend on the right panel
points(rep(1.8,4), 1:4, pch=21, cex=2, bg=as.factor(levels(traits_fruits[,"Plant"])) )
text(rep(2,4), 1:4, levels(traits_fruits[,"Plant"]), cex=2, adj=0 )
graphics.off() # closing the jpeg
#################################
# illustration of bias induced by functional dendrogram or space of low dimensionality
# functional differences between lime and lemon and lime and cherry
# traits values
traits_fruits[c("cherry","lime","lemon"),]
# raw distance based on traits values => lime is >3 times closer to lemon than to cherry
round(as.matrix(qual_funct_space$details_funct_space$mat_dissim)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
##################################
# plot of best functional dendrogram
plot(qual_funct_space$details_funct_space$best_tree, sub="", main="UPGMA", xlab="")
# distance on best dendrogram
round(as.matrix(qual_funct_space$details_funct_space$dist_st$t_UPGMA)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime as close to lemon than to cherry
# look at position of lime on the tree
##################################
# distance in the 2D space
round(as.matrix(qual_funct_space$details_funct_space$dist_st$m_2D)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime closer to lemon than to cherry, but cherry is less than 1.5 further than lime from lemon
# look at position of these 3 species on PC1-PC2 on "Fspace_fruits_codes_12.jpeg", cherry is not that far from both Citrus
##################################
# distance in the 4D space
round(as.matrix(qual_funct_space$details_funct_space$dist_st$m_4D)[c("cherry","lime","lemon"),c("cherry","lime","lemon")],3)
# => lime 2.4 times closer to lemon than to cherry
# look at position of these 3 species on PC3-PC4 on "Fspace_fruits_4D.jpeg", cherry is far from both Citrus
##############################################################################################
# MULTIDIMENSIONAL FUNCTIONAL DIVERISTY INDICES
# computing Functional diversity indices with plots of FD indices put in a subfolder named plot_FD
FD_baskets<-multidimFD(coord_fruits_4D, weight_fruits_baskets, check_species_pool=TRUE, verb=TRUE,
nm_asb_plot=row.names(weight_fruits_baskets), folder_plot="/Volumes/Data/tutorial_FD/results/plot_FD/",
Faxes_plot=colnames(coord_fruits_4D)[1:4], Faxes_nm_plot=colnames(coord_fruits_4D)[1:4],
plot_pool=TRUE, col_bg="grey90", col_sp_pool="grey30",  pch_sp_pool="+", cex_sp_pool=1,
pch_sp=21, col_sp="#1E90FF", transp=50 )
# printing results = rounded FD indices values
round(FD_baskets,3)
# look to the folder "../plot_FD"
##############################################################################################
# MULTIDIMENSIONAL FUNCTIONAL BETA DIVERISTY INDICES
# occurences from species weights
occ_fruits_baskets<-weight_fruits_baskets
occ_fruits_baskets[which(occ_fruits_baskets>0)]<-1
# indices computation for all pairs of asssemblages but plot for only a subset
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets)[4:9] , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:4] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:4] )
FbetaD_baskets
# look to the folder "../plot_FbetaD"
##############################################################################################
# NULL MODEL
# example of how running a null model : here we want to test H0: Basket_4 results from a random sorting of species in the regional species pool (i.e. all species) given its species richness. To keep the exampel simple, will focus only on FRic index so taking into account only species composition, not species weights
# picking many assemblages of S(basket_4) species at random among the 25 fruits
nbrep<-99 # number of replicates
S_basket_4<-FD_baskets["basket_4","Nb_sp"]
S_basket_4 # 8 species`
# empty matrix to store simulated species occurences
basket_4_H0<-matrix(0, nbrep, ncol(weight_fruits_baskets), dimnames=list(1:nbrep, colnames(weight_fruits_baskets) ) )
for (k in 1:nbrep)
{
basket_4_H0[k, sample(  colnames(weight_fruits_baskets), S_basket_4) ]<-1 # random sorting of species
}# end of k
# computing FD indices on these assemblages, ,  check_species_pool=FALSE since by chance some species could be never picked
FD_basket_4_H0<-multidimFD(coord_fruits_4D, basket_4_H0,  check_species_pool=FALSE )
# comparing observed and expected values under H0 using sES and p-value metrics
SES_FRic_basket_4<- (FD_baskets["basket_4","FRic"]-mean(FD_basket_4_H0[,"FRic"]) ) / sd(FD_basket_4_H0[,"FRic"])
SES_FRic_basket_4 # SES<(-1) means that observed Fric is lower than expected
pvalue_FRic_basket_4<- length(which(FD_baskets["basket_4","FRic"]<=FD_basket_4_H0[,"FRic"]))/ ( length(FD_basket_4_H0[,"FRic"]) +1 )
pvalue_FRic_basket_4 # p-value >0.975 => FRic is significantly lower than expected under H0
##############################################################################################
# indices computation for all pairs of asssemblages, plot only on 3 first axes
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets) , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:3] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:3] )
FbetaD_baskets
# look to the folder "../plot_FbetaD"
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets) , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:3] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:3] )
FbetaD_baskets
setwd("/Volumes/Data/tutorial_FD/functions") # folder where R functions have been saved
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
source("multidimFbetaD.R")
# indices computation for all pairs of asssemblages, plot only on 3 first axes
FbetaD_baskets<-multidimFbetaD ( coord=coord_fruits_4D,  occ=occ_fruits_baskets,  check_species_pool=FALSE, verb=TRUE,
nm_asb_plot=row.names(occ_fruits_baskets) , folder_plot="/Volumes/Data/tutorial_FD/results/plot_FbetaD/" ,
Faxes_plot=colnames(coord_fruits_4D)[1:3] , Faxes_nm_plot=colnames(coord_fruits_4D)[1:3] )
FbetaD_baskets
