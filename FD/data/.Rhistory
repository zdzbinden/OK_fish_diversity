for (i in 1:4)
{
Qraw_fake_i<-relab[i,] %*% dfunct %*% relab[i,]
FDq2["FDq2_fake",i]<-1/(1-Qraw_fake_i[1,1])
Qraw_max_i<-relab[i,] %*% dfunct_max %*% relab[i,]
FDq2["FDq2_max",i]<-1/(1-Qraw_max_i[1,1])
} # end of i
FDq2 # OK for FD(q=2)
####################################################################################
# test of FD(q=0) based on transformatino of FAD
FDq0<-matrix( 0,2,3, dimnames=list( c("FDq0_fake", "FDq0_max") , row.names(relab) ) )
for (i in 1:3)
{
FADraw_fake_i<- sum( dfunct * dfunct)
FDq0["FDq0_fake",i]<-(1+sqrt( (1+4*FADraw_fake_i) ) ) / 2
FADraw_max_i<-sum(dfunct_max * dfunct_max)
FDq0["FDq0_max",i]<-(1+sqrt( (1+4*FADraw_max_i) ) ) / 2
} # end of i
FDq0 # OK for FD(q=0)
####################################################################################
# test of FDq=1 based on tranformation of a Shannon like FD index
FDq1<-matrix( 0,2,4, dimnames=list( c("FDq1_fake", "FDq1_max") , row.names(relab) ) )
for (i in 1:4)
{
FDpfake_i<-matrix(0,nrow(dfunct),nrow(dfunct))
for( x in 1:nrow(dfunct) )
for( y in 1:nrow(dfunct) )
{ FDpfake_i[x,y]<-dfunct[x,y] * ( relab[i,x]*relab[i,y])  * log( relab[i,x]*relab[i,y] )   }# end of x,y
raw_fake_i<- (-1)*sum(FDpfake_i)
FDq1["FDq1_fake",i]<-uniroot(f=function(x) ( 2*log(x)-2*log(x)/x-raw_fake_i ) , interval=c(1,7) )$root
FDpraw_i<-matrix(0,nrow(dfunct_max),nrow(dfunct_max))
for( x in 1:nrow(dfunct_max) )
for( y in 1:nrow(dfunct_max) )
{ FDpraw_i[x,y]<-dfunct_max[x,y] * ( relab[i,x]*relab[i,y])  * log( relab[i,x]*relab[i,y] )   }# end of x,y
raw_max_i<- (-1)*sum(FDpraw_i)
FDq1["FDq1_max",i]<-uniroot(f=function(x) ( 2*log(x)-2*log(x)/x-raw_max_i ) , interval=c(1,7) )$root
} # end of i
FDq1 # OK for FD(q=1)
####################################################################################
# test of FDq=1 based on square root of relative abundance
FDq1_bis<-matrix( 0,2,4, dimnames=list( c("FDq1b_fake", "FDq1b_max") , row.names(relab) ) )
for (i in 1:4)
{
FDpfake_i<-matrix(0,nrow(dfunct),nrow(dfunct))
for( x in 1:nrow(dfunct) )
for( y in 1:nrow(dfunct) )
{ FDpfake_i[x,y]<-dfunct[x,y] * ( relab[i,x]*relab[i,y])^(0.5)    }# end of x,y
raw_fake_i<- sum(FDpfake_i)
FDq1_bis["FDq1b_fake",i]<-raw_fake_i+1
FDpraw_i<-matrix(0,nrow(dfunct_max),nrow(dfunct_max))
for( x in 1:nrow(dfunct_max) )
for( y in 1:nrow(dfunct_max) )
{ FDpraw_i[x,y]<-dfunct_max[x,y] * ( relab[i,x]*relab[i,y])^(0.5)    }# end of x,y
raw_max_i<-sum(FDpraw_i)
FDq1_bis["FDq1b_max",i]<-raw_max_i+1
} # end of i
FDq1_bis # OK for FD(q=1)
####################################################################################
rbind(FDq0,FDq1,FDq1_bis, FDq2)
#################################################################################################################################################################
#################################################################################################################################################################
x<-(0:1000)/1000
plot(0,0,xlim=c(0,1), ylim=c(0,1), type="n")
points(x, sqrt(x) , cex=0.3, pch=21, col="red")
points(x, (-1)*x*log(x)  , cex=0.3, pch=21, , col="brown")
points(x,   , cex=0.3, pch=21, , col="blue3")
points(x, x  , cex=0.3, pch=21, , col="darkgreen")
rm(list=ls())
#################################################################################################################################################################
# FAKE DATA
# fake distance matrices
# species traits and position in the 2D functional space  (a~c) != (e~f) != (d~g) != b  ['!=' means 'different']
tr<-matrix(c(0,1,4,1,0.25,1,2.5,4,2,0,2,0.25,2.5,3.75) ,7,2,T)   ; row.names(tr)<-c("a","b","c","d","e","f","g")
plot(tr,type="n",xlab="Trait 1", ylab="Trait2") ; text(tr[,1],tr[,2], row.names(tr))
# functional distance between species (Euclidean distance), scaled by maximal value
dfunct<-dist(tr)
dfunct<-as.matrix( dfunct/max(dfunct) )
# all dsitances between species =1
dfunct_max<-dfunct
dfunct_max[which(dfunct_max>0)]<-1
dfunct
dfunct_max
# fake abundances => 7 species with even (1), almost even (2) or uneven abundances with either max abundance on functionally different (3) or similar species (4)
ab<-rbind( rep(1,7), c(1.5,1.5,1,1,1,1), c(100,100,1,1,1,1,1) , c(100,1,100,1,1,1,1) )
row.names(ab)<-c("even_ab","almsteven_ab","highab_diffsp","highab_simsp") ; colnames(ab)<-row.names(tr)
relab<-ab/apply(ab,1,sum)
relab
#################################################################################################################################################################
# Rao's quadratic entropy in equivalent number of species (FD(q=2) = 1/(1-Q)
FDq2<-matrix( 0,2,4, dimnames=list( c("FDq2_fake", "FDq2_max") , row.names(relab) ) )
for (i in 1:4)
{
Qraw_fake_i<-relab[i,] %*% dfunct %*% relab[i,]
FDq2["FDq2_fake",i]<-1/(1-Qraw_fake_i[1,1])
Qraw_max_i<-relab[i,] %*% dfunct_max %*% relab[i,]
FDq2["FDq2_max",i]<-1/(1-Qraw_max_i[1,1])
} # end of i
FDq2 # OK for FD(q=2)
####################################################################################
# test of FD(q=0) based on transformatino of FAD
FDq0<-matrix( 0,2,4, dimnames=list( c("FDq0_fake", "FDq0_max") , row.names(relab) ) )
for (i in 1:3)
{
FADraw_fake_i<- sum( dfunct * dfunct)
FDq0["FDq0_fake",i]<-(1+sqrt( (1+4*FADraw_fake_i) ) ) / 2
FADraw_max_i<-sum(dfunct_max * dfunct_max)
FDq0["FDq0_max",i]<-(1+sqrt( (1+4*FADraw_max_i) ) ) / 2
} # end of i
FDq0 # OK for FD(q=0)
####################################################################################
# test of FDq=1 based on tranformation of a Shannon like FD index
FDq1<-matrix( 0,2,4, dimnames=list( c("FDq1_fake", "FDq1_max") , row.names(relab) ) )
for (i in 1:4)
{
FDpfake_i<-matrix(0,nrow(dfunct),nrow(dfunct))
for( x in 1:nrow(dfunct) )
for( y in 1:nrow(dfunct) )
{ FDpfake_i[x,y]<-dfunct[x,y] * ( relab[i,x]*relab[i,y])  * log( relab[i,x]*relab[i,y] )   }# end of x,y
raw_fake_i<- (-1)*sum(FDpfake_i)
FDq1["FDq1_fake",i]<-uniroot(f=function(x) ( 2*log(x)-2*log(x)/x-raw_fake_i ) , interval=c(1,7) )$root
FDpraw_i<-matrix(0,nrow(dfunct_max),nrow(dfunct_max))
for( x in 1:nrow(dfunct_max) )
for( y in 1:nrow(dfunct_max) )
{ FDpraw_i[x,y]<-dfunct_max[x,y] * ( relab[i,x]*relab[i,y])  * log( relab[i,x]*relab[i,y] )   }# end of x,y
raw_max_i<- (-1)*sum(FDpraw_i)
FDq1["FDq1_max",i]<-uniroot(f=function(x) ( 2*log(x)-2*log(x)/x-raw_max_i ) , interval=c(1,7) )$root
} # end of i
FDq1 # OK for FD(q=1)
####################################################################################
# test of FDq=1 based on square root of relative abundance
FDq1_bis<-matrix( 0,2,4, dimnames=list( c("FDq1b_fake", "FDq1b_max") , row.names(relab) ) )
for (i in 1:4)
{
FDpfake_i<-matrix(0,nrow(dfunct),nrow(dfunct))
for( x in 1:nrow(dfunct) )
for( y in 1:nrow(dfunct) )
{ FDpfake_i[x,y]<-dfunct[x,y] * ( relab[i,x]*relab[i,y])^(0.5)    }# end of x,y
raw_fake_i<- sum(FDpfake_i)
FDq1_bis["FDq1b_fake",i]<-raw_fake_i+1
FDpraw_i<-matrix(0,nrow(dfunct_max),nrow(dfunct_max))
for( x in 1:nrow(dfunct_max) )
for( y in 1:nrow(dfunct_max) )
{ FDpraw_i[x,y]<-dfunct_max[x,y] * ( relab[i,x]*relab[i,y])^(0.5)    }# end of x,y
raw_max_i<-sum(FDpraw_i)
FDq1_bis["FDq1b_max",i]<-raw_max_i+1
} # end of i
FDq1_bis # OK for FD(q=1)
####################################################################################
rbind(FDq0,FDq1,FDq1_bis, FDq2)
#################################################################################################################################################################
#################################################################################################################################################################
x<-(0:1000)/1000
plot(0,0,xlim=c(0,1), ylim=c(0,1), type="n")
points(x, sqrt(x) , cex=0.3, pch=21, col="red")
points(x, (-1)*x*log(x)  , cex=0.3, pch=21, , col="brown")
points(x,   , cex=0.3, pch=21, , col="blue3")
points(x, x  , cex=0.3, pch=21, , col="darkgreen")
rm(list=ls())
#################################################################################################################################################################
# FAKE DATA
# fake distance matrices
# species traits and position in the 2D functional space  (a~c) != (e~f) != (d~g) != b  ['!=' means 'different']
tr<-matrix(c(0,1,4,1,0.25,1,2.5,4,2,0,2,0.25,2.5,3.75) ,7,2,T)   ; row.names(tr)<-c("a","b","c","d","e","f","g")
plot(tr,type="n",xlab="Trait 1", ylab="Trait2") ; text(tr[,1],tr[,2], row.names(tr))
# functional distance between species (Euclidean distance), scaled by maximal value
dfunct<-dist(tr)
dfunct<-as.matrix( dfunct/max(dfunct) )
# all dsitances between species =1
dfunct_max<-dfunct
dfunct_max[which(dfunct_max>0)]<-1
dfunct
dfunct_max
# fake abundances => 7 species with even (1), almost even (2) or uneven abundances with either max abundance on functionally different (3) or similar species (4)
ab<-rbind( rep(1,7), c(1.5,1.5,1,1,1,1), c(100,100,1,1,1,1,1) , c(100,1,100,1,1,1,1) )
row.names(ab)<-c("even_ab","almsteven_ab","highab_diffsp","highab_simsp") ; colnames(ab)<-row.names(tr)
relab<-ab/apply(ab,1,sum)
relab
#################################################################################################################################################################
# Rao's quadratic entropy in equivalent number of species (FD(q=2) = 1/(1-Q)
FDq2<-matrix( 0,2,4, dimnames=list( c("FDq2_fake", "FDq2_max") , row.names(relab) ) )
for (i in 1:4)
{
Qraw_fake_i<-relab[i,] %*% dfunct %*% relab[i,]
FDq2["FDq2_fake",i]<-1/(1-Qraw_fake_i[1,1])
Qraw_max_i<-relab[i,] %*% dfunct_max %*% relab[i,]
FDq2["FDq2_max",i]<-1/(1-Qraw_max_i[1,1])
} # end of i
FDq2 # OK for FD(q=2)
####################################################################################
# test of FD(q=0) based on transformatino of FAD
FDq0<-matrix( 0,2,4, dimnames=list( c("FDq0_fake", "FDq0_max") , row.names(relab) ) )
for (i in 1:4)
{
FADraw_fake_i<- sum( dfunct * dfunct)
FDq0["FDq0_fake",i]<-(1+sqrt( (1+4*FADraw_fake_i) ) ) / 2
FADraw_max_i<-sum(dfunct_max * dfunct_max)
FDq0["FDq0_max",i]<-(1+sqrt( (1+4*FADraw_max_i) ) ) / 2
} # end of i
FDq0 # OK for FD(q=0)
####################################################################################
# test of FDq=1 based on tranformation of a Shannon like FD index
FDq1<-matrix( 0,2,4, dimnames=list( c("FDq1_fake", "FDq1_max") , row.names(relab) ) )
for (i in 1:4)
{
FDpfake_i<-matrix(0,nrow(dfunct),nrow(dfunct))
for( x in 1:nrow(dfunct) )
for( y in 1:nrow(dfunct) )
{ FDpfake_i[x,y]<-dfunct[x,y] * ( relab[i,x]*relab[i,y])  * log( relab[i,x]*relab[i,y] )   }# end of x,y
raw_fake_i<- (-1)*sum(FDpfake_i)
FDq1["FDq1_fake",i]<-uniroot(f=function(x) ( 2*log(x)-2*log(x)/x-raw_fake_i ) , interval=c(1,7) )$root
FDpraw_i<-matrix(0,nrow(dfunct_max),nrow(dfunct_max))
for( x in 1:nrow(dfunct_max) )
for( y in 1:nrow(dfunct_max) )
{ FDpraw_i[x,y]<-dfunct_max[x,y] * ( relab[i,x]*relab[i,y])  * log( relab[i,x]*relab[i,y] )   }# end of x,y
raw_max_i<- (-1)*sum(FDpraw_i)
FDq1["FDq1_max",i]<-uniroot(f=function(x) ( 2*log(x)-2*log(x)/x-raw_max_i ) , interval=c(1,7) )$root
} # end of i
FDq1 # OK for FD(q=1)
####################################################################################
# test of FDq=1 based on square root of relative abundance
FDq1_bis<-matrix( 0,2,4, dimnames=list( c("FDq1b_fake", "FDq1b_max") , row.names(relab) ) )
for (i in 1:4)
{
FDpfake_i<-matrix(0,nrow(dfunct),nrow(dfunct))
for( x in 1:nrow(dfunct) )
for( y in 1:nrow(dfunct) )
{ FDpfake_i[x,y]<-dfunct[x,y] * ( relab[i,x]*relab[i,y])^(0.5)    }# end of x,y
raw_fake_i<- sum(FDpfake_i)
FDq1_bis["FDq1b_fake",i]<-raw_fake_i+1
FDpraw_i<-matrix(0,nrow(dfunct_max),nrow(dfunct_max))
for( x in 1:nrow(dfunct_max) )
for( y in 1:nrow(dfunct_max) )
{ FDpraw_i[x,y]<-dfunct_max[x,y] * ( relab[i,x]*relab[i,y])^(0.5)    }# end of x,y
raw_max_i<-sum(FDpraw_i)
FDq1_bis["FDq1b_max",i]<-raw_max_i+1
} # end of i
FDq1_bis # OK for FD(q=1)
####################################################################################
rbind(FDq0,FDq1,FDq1_bis, FDq2)
#################################################################################################################################################################
#################################################################################################################################################################
x<-(0:1000)/1000
plot(0,0,xlim=c(0,1), ylim=c(0,1), type="n")
points(x, sqrt(x) , cex=0.3, pch=21, col="red")
points(x, (-1)*x*log(x)  , cex=0.3, pch=21, , col="brown")
points(x,   , cex=0.3, pch=21, , col="blue3")
points(x, x  , cex=0.3, pch=21, , col="darkgreen")
all[c(3,5,7),1] / all[c(3,5,7),2]
all<-rbind(FDq0,FDq1,FDq1_bis, FDq2)
all[c(3,5,7),1] / all[c(3,5,7),2]
all<-rbind(FDq0,FDq1,FDq1_bis, FDq2)
all[,1] / all[,2]
points(x, (-1)*x*log(x,base=e)  , cex=0.3, pch=21, , col="brown")
?log
exp(1)
x<-(0:1000)/1000
plot(0,0,xlim=c(0,1), ylim=c(0,1), type="n")
points(x, sqrt(x) , cex=0.3, pch=21, col="red")
points(x, (-1)*x*log(x,base=e)  , cex=0.3, pch=21, , col="brown")
points(x,  x^2 , cex=0.3, pch=21, , col="blue3")
points(x, x  , cex=0.3, pch=21, , col="darkgreen")
x<-(0:1000)/1000
plot(0,0,xlim=c(0,1), ylim=c(0,1), type="n")
points(x, sqrt(x) , cex=0.3, pch=21, col="red")
points(x, (-1)*x*log(x)  , cex=0.3, pch=21, , col="brown")
points(x,  x^2 , cex=0.3, pch=21, , col="blue3")
points(x, x  , cex=0.3, pch=21, , col="darkgreen")
35+26+20+94+135+7
55+26+20+94+136+7
55+26+20+94+126+7
a<-1:3
names(a)<-4:6
names(a[2])
names(a["5"])
366+55
install.packages(c("entropart", "hypervolume", "lme4", "randomForest", "RcppArmadillo", "RcppEigen", "rgl", "vegan"))
install.packages(c("entropart", "hypervolume", "lme4", "randomForest", "RcppArmadillo", "RcppEigen", "rgl", "vegan"))
600/39.15
600/39.2
library(ape)
?pcoa
test<-matrix(rnorm(100),20,5)
test_pcoa<-pcoa(dist(test))
test_pcoa$Eigenvalues
test_pcoa$values
test_pcoa<-pcoa(dist(test,"Gower"))
test_pcoa<-pcoa(dist(test,"gower"))
library(vegan)
test_pcoa<-pcoa(vegdist(test,"gower"))
test_pcoa$values
22*7*2*3
12*15
12*12
10000/650
install.packages(c("ade4", "ape", "coda", "entropart", "foreach", "hypervolume", "iterators", "jsonlite", "ks", "lme4", "MASS", "Matrix", "mgcv", "mice", "multicool", "pbkrtest", "plotrix", "randomForest", "Rcpp", "RcppArmadillo", "rgl", "vegan", "xtable"))
213000/374
18*400
sample(1:4,3)
sample(1:4,3)
1205*0.8
combn(1:12)
combn(1:12,2)
combn(1:10,2)
combn(1:11,2)
68+73.7
2816/24
2400/28
2400/25.7
2125/28
75/1.83^2
85/1.83^2
95/1.83^2
105/1.83^2
100/1.83^2
320*0.75*7
5.4/36
6/36
28/36
26/36
24/36
24/(24+95)
27/(24+95)
27/36
rm(list=ls()) # cleaning memory
##############################################################################################
# sourcing 3 functions
setwd("/Volumes/Data/tutorial_FD/functions") # setting working directory
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
##############################################################################################
# IMPORTING DATASETS
setwd("/Volumes/Data/tutorial_FD/data") # setting working directory for data
# importing biomass of species in assemblages from a txt file: row names are in the first column
weight_fruits_baskets<-read.table("weight_fruits_baskets.txt", header=T, row.names =1)
weight_fruits_baskets<-as.matrix(weight_fruits_baskets)
weight_fruits_baskets
############################################
# importing species raw traits values from a txt file: row names are in the column named 'Species'
traits_raw_fruits<-read.table("traits_raw_fruits.txt", header=T, row.names = "Species")
# checking match of species names
sum( row.names(traits_raw_fruits) %in% colnames(weight_fruits_baskets) ) == ncol(weight_fruits_baskets)
# looking at traits coding after importing data
traits_raw_fruits
summary(traits_raw_fruits) # all traits but 'Sugar_content' are considered as categorical
# => need to set correct type of variables
# empty dataframe to store formatted traits values
traits_fruits<-as.data.frame( matrix(NA, nrow(traits_raw_fruits), ncol(traits_raw_fruits),
dimnames=list( row.names(traits_raw_fruits), names(traits_raw_fruits) ) ) )
# formatting ordered traits
traits_fruits[,"Size"]<-factor(traits_raw_fruits[,"Size"], levels=c("0-1cm", "1-3cm", "3-5cm", "5-10cm", "10-20cm" ), labels = c("very_small", "small", "medium", "large", "very_large" ), ordered = TRUE )
traits_fruits[,"Plant"]<-traits_raw_fruits[,"Plant"]
traits_fruits[,"Origin"]<-factor(traits_raw_fruits[,"Origin"], levels=c("temperate", "subtropical", "tropical" ), ordered = TRUE )
traits_fruits[,"Seed"]<-factor(traits_raw_fruits[,"Seed"], levels=c("none", "pit", "pip" ), ordered = TRUE )
traits_fruits[,"Sugar_content"]<-as.numeric( traits_raw_fruits[,"Sugar_content"] )
# compare
is.ordered(traits_raw_fruits[,"Size"])
is.ordered(traits_fruits[,"Size"])
# species names and codes (for graphics)
species_names<-row.names(traits_fruits)
species_codes<-substr(species_names,1,4) ; names(species_codes)<-species_names # codes = 4 first letters of species name
length(unique(species_codes))==length(species_names) # False
summary(as.factor(species_codes)) # grappefruit and grape has same code
species_codes["grapefruit"]<-"graf" # new code for grapefruit
length(unique(species_codes))==length(species_names) # OK
library(FD)
gowdis(traits_fruits)
fd_gow<-gowdis(traits_fruits)
daisy_gow<-daisy(traits_fruits,"Gower")
require(ape)
require(clue)
require(cluster)
require(geometry)
daisy_gow<-daisy(traits_fruits,"Gower")
daisy_gow<-daisy(traits_fruits,"gower")
fd_gow<-gowdis(traits_fruits,ord="metric")
summary(daisy_gow-fd_gow)
fd_gow<-gowdis(traits_fruits,ord="classic")
summary(daisy_gow-fd_gow)
?daisy
173+185
173+185-(15+6+18+9)
2%*%3
# crash tests for homemade functions
rm(list=ls()) # cleaning memory
##############################################################################################
# sourcing 3 functions
setwd("/Volumes/Data/tutorial_FD/functions") # setting working directory
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
##############################################################################################
# loading fruits data and creating duplicates with errors
setwd("/Volumes/Data/tutorial_FD/data") # setting working directory
load("traits_fruits") ; summary(traits_fruits)
load("weight_fruits_baskets")
traits_fruits_NA<-traits_fruits
traits_fruits_NA[c(1,5),1]<-NA
summary(traits_fruits_NA)
weight_fruits_baskets_NA<-weight_fruits_baskets
weight_fruits_baskets_NA[3]<-NA
summary(weight_fruits_baskets_NA)
weight_fruits_baskets
FD_fruits<-multidimFD(coord_fruits_4D, weight_fruits_baskets,
nm_asb_plot=NULL, Faxes_plot=NULL,
folder_plot="/Volumes/Data/tutorial_FD/plot_FD", plot_pool=TRUE, col_bg="grey90",
pch_sp=21, col_sp="#1E90FF", transp=50 )
traits_allcont<-matrix( rnorm(50),10,5, dimnames=list( paste("sp",1:10,sep="_"), paste( "tr",c("A","B","C","D","E"),sep="_") ) )
dim(traits_allcontx)
dim(traits_allcont)
weight_fake<-matrix( c(10,10,rep(0,8), c(10,10,10,1,rep(0,6),), 2, 10, T, dimnames=list( paste("sp",1:10,sep="_"), paste( "tr",c("A","B","C","D","E"),sep="_")  ) )
traits_allcont<-matrix( rnorm(50),10,5, dimnames=list( paste("sp",1:10,sep="_"), paste( "tr",c("A","B","C","D","E"),sep="_") ) )
weight_fake<-matrix( c( 10,10,rep(0,8), 10,10,10,1,rep(0,6) ), 2, 10, T, dimnames=list( paste("sp",1:10,sep="_"), paste( "tr",c("A","B","C","D","E"),sep="_")  ) )
rep(0,6)
c( 10,10,rep(0,8), 10,10,10,1,rep(0,6) )
weight_fake<-matrix( c( 10,10,rep(0,8), 10,10,10,1,rep(0,6) ), 2, 10, T, dimnames=list( paste("sp",1:10,sep="_"), paste( "comm",c("A","B",),sep="_")  ) )
weight_fake<-matrix( c( 10,10,rep(0,8), 10,10,10,1,rep(0,6) ), 2, 10, T, dimnames=list( paste("sp",1:10,sep="_"), paste( "comm",c("A","B"),sep="_")  ) )
weight_fake<-matrix( c( 10,10,rep(0,8), 10,10,10,1,rep(0,6) ), 2, 10, T, dimnames=list( paste( "comm",c("A","B"),sep="_"),paste("sp",1:10,sep="_")  ) )
weight_fake
test_2species<-multidimFD(traits_cont, weight_fake, nm_asb_plot=NULL, Faxes_plot=NULL)
# fake continuous traits matrix
traits_allcont<-matrix( rnorm(50),10,5, dimnames=list( paste("sp",1:10,sep="_"), paste( "tr",c("A","B","C","D","E"),sep="_") ) )
weight_fake<-matrix( c( 10,10,rep(0,8), 10,10,10,1,rep(0,6) ), 2, 10, T, dimnames=list( paste( "comm",c("A","B"),sep="_"),paste("sp",1:10,sep="_")  ) )
test_2species<-multidimFD(traits_allcont, weight_fake, nm_asb_plot=NULL, Faxes_plot=NULL)
weight_fake<-matrix( c( 10,10,rep(0,8), 10,10,10,1,rep(0,6),rep(1,10) ), 3, 10, T, dimnames=list( paste( "comm",c("A","B","C"),sep="_"),paste("sp",1:10,sep="_")  ) )
test_2species<-multidimFD(traits_allcont, weight_fake, nm_asb_plot=NULL, Faxes_plot=NULL)
test_2species
weight_fake<-matrix( c( 10,rep(0,9), 10,10,rep(0,8),rep(1,10) ), 3, 10, T, dimnames=list( paste( "comm",c("A","B","C"),sep="_"),paste("sp",1:10,sep="_")  ) )
test_2species<-multidimFD(traits_allcont, weight_fake, nm_asb_plot=NULL, Faxes_plot=NULL)
weight<-weight_fake
k=1
weight_k<-weight[k,]
nm_sp_k<-row.names(coord)[which(weight_k>0)]
nb_sp_k<-length(nm_sp_k) ;  FD[k,"Nb_sp"]<-nb_sp_k
coord<-traits_allcont
weight_k<-weight[k,]
nm_sp_k<-row.names(coord)[which(weight_k>0)]
nb_sp_k<-length(nm_sp_k) ;  FD[k,"Nb_sp"]<-nb_sp_k
weight_sp_k<-weight[k,nm_sp_k]
coord_sp_k<-coord[nm_sp_k,]
weight_sp_k
coord_sp_k
is.matrix(coord_sp_k)
as.matrix(coord_sp_k)
if(nb_sp_k==1) {coord_sp_k<-matrix(coord_sp_k,nrow=1)}
coord_sp_k
k=2
weight_k<-weight[k,]
nm_sp_k<-row.names(coord)[which(weight_k>0)]
nb_sp_k<-length(nm_sp_k)
weight_sp_k<-weight[k,nm_sp_k]
coord_sp_k<-coord[nm_sp_k,]
weight_sp_k
coord_sp_k
k=1
weight_k<-weight[k,]
nm_sp_k<-row.names(coord)[which(weight_k>0)]
nb_sp_k<-length(nm_sp_k)
weight_sp_k<-weight[k,nm_sp_k]
coord_sp_k<-coord[nm_sp_k,]
coord_sp_k
if(nb_sp_k==1) {coord_sp_k<-matrix(coord_sp_k,nrow=1,dimnames=list(nm_sp_k,colnames(coord)) ) } # matrix object
coord_sp_k
# crash tests for homemade functions
rm(list=ls()) # cleaning memory
##############################################################################################
# sourcing 3 functions
setwd("/Volumes/Data/tutorial_FD/functions") # setting working directory
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
##############################################################################################
# loading fruits data and creating duplicates with errors
setwd("/Volumes/Data/tutorial_FD/data") # setting working directory
load("traits_fruits") ; summary(traits_fruits)
load("weight_fruits_baskets")
traits_fruits_NA<-traits_fruits
traits_fruits_NA[c(1,5),1]<-NA
summary(traits_fruits_NA)
weight_fruits_baskets_NA<-weight_fruits_baskets
weight_fruits_baskets_NA[3]<-NA
summary(weight_fruits_baskets_NA)
# fake continuous traits matrix
traits_allcont<-matrix( rnorm(50),10,5, dimnames=list( paste("sp",1:10,sep="_"), paste( "tr",c("A","B","C","D","E"),sep="_") ) )
weight_fake<-matrix( c( 10,rep(0,9), 10,10,rep(0,8),rep(1,10) ), 3, 10, T, dimnames=list( paste( "comm",c("A","B","C"),sep="_"),paste("sp",1:10,sep="_")  ) )
test_2species<-multidimFD(traits_allcont, weight_fake, nm_asb_plot=NULL, Faxes_plot=NULL)
test_2species
test_2species<-multidimFD(traits_allcont, weight_fake, nm_asb_plot=NULL, Faxes_plot=NULL)
# crash tests for homemade functions
rm(list=ls()) # cleaning memory
##############################################################################################
# sourcing 3 functions
setwd("/Volumes/Data/tutorial_FD/functions") # setting working directory
source("quality_funct_space.R")
source("plot_funct_space.R")
source("multidimFD.R")
##############################################################################################
# loading fruits data and creating duplicates with errors
setwd("/Volumes/Data/tutorial_FD/data") # setting working directory
load("traits_fruits") ; summary(traits_fruits)
load("weight_fruits_baskets")
traits_fruits_NA<-traits_fruits
traits_fruits_NA[c(1,5),1]<-NA
summary(traits_fruits_NA)
weight_fruits_baskets_NA<-weight_fruits_baskets
weight_fruits_baskets_NA[3]<-NA
summary(weight_fruits_baskets_NA)
# fake continuous traits matrix
traits_allcont<-matrix( rnorm(50),10,5, dimnames=list( paste("sp",1:10,sep="_"), paste( "tr",c("A","B","C","D","E"),sep="_") ) )
weight_fake<-matrix( c( 10,rep(0,9), 10,10,rep(0,8),rep(1,10) ), 3, 10, T, dimnames=list( paste( "comm",c("A","B","C"),sep="_"),paste("sp",1:10,sep="_")  ) )
test_2species<-multidimFD(traits_allcont, weight_fake, nm_asb_plot=NULL, Faxes_plot=NULL)
round(test_2species,2)
